// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RedditAlike.Models;

namespace RedditAlike.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("RedditAlike.Models.DootFeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("DootType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("DooterId")
                        .HasColumnType("uuid");

                    b.Property<int>("FeedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DooterId");

                    b.HasIndex("FeedId");

                    b.ToTable("DootFeeds");
                });

            modelBuilder.Entity("RedditAlike.Models.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DootStatus")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfComments")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("RedditAlike.Models.FeedComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("CommenterId")
                        .HasColumnType("uuid");

                    b.Property<int>("FeedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommenterId");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedComments");
                });

            modelBuilder.Entity("RedditAlike.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("RedditAlike.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RedditAlike.Models.DootFeed", b =>
                {
                    b.HasOne("RedditAlike.Models.User", "Dooter")
                        .WithMany("DootFeeds")
                        .HasForeignKey("DooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedditAlike.Models.Feed", "Feed")
                        .WithMany("DootFeeds")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dooter");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("RedditAlike.Models.Feed", b =>
                {
                    b.HasOne("RedditAlike.Models.User", "Creator")
                        .WithMany("Feeds")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RedditAlike.Models.FeedComment", b =>
                {
                    b.HasOne("RedditAlike.Models.User", "Commenter")
                        .WithMany("FeedComments")
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedditAlike.Models.Feed", "Feed")
                        .WithMany("FeedComments")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commenter");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("RedditAlike.Models.Feed", b =>
                {
                    b.Navigation("DootFeeds");

                    b.Navigation("FeedComments");
                });

            modelBuilder.Entity("RedditAlike.Models.User", b =>
                {
                    b.Navigation("DootFeeds");

                    b.Navigation("FeedComments");

                    b.Navigation("Feeds");
                });
#pragma warning restore 612, 618
        }
    }
}
